name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  pull_request_target:

jobs:
  labeler:
    name: Auto Label PRs
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request_target'
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Auto Label
        uses: actions/labeler@v4
        with:
          repo-token: '${{ secrets.GITHUB_TOKEN }}'
          sync-labels: true

  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Check Prettier formatting
        run: npm run format:check

      - name: Type check
        run: npm run type-check

  test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: .next/

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level moderate

  lighthouse:
    name: Lighthouse Performance
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Lighthouse Check
        uses: foo-software/lighthouse-check-action@master
        with:
          urls: 'https://louisphilipshahim.com/'

  pr-comment:
    name: PR Comment
    runs-on: ubuntu-latest
    needs: [lint, test, security]
    if: github.event_name == 'pull_request'
    steps:
      - name: Comment PR with results
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('## PR Quality Check Results')
            );
            
            const status = '${{ needs.lint.result }}' === 'success' && 
                          '${{ needs.test.result }}' === 'success' && 
                          '${{ needs.security.result }}' === 'success' ? 'success' : 'failure';
            const emoji = status === 'success' ? '✅' : '❌';
            
            const body = `## PR Quality Check Results ${emoji}
            
            **Status:** ${status}
            
            **Checks completed:**
            - ${'${{ needs.lint.result }}' === 'success' ? '✅' : '❌'} ESLint
            - ${'${{ needs.lint.result }}' === 'success' ? '✅' : '❌'} Prettier formatting
            - ${'${{ needs.lint.result }}' === 'success' ? '✅' : '❌'} TypeScript type checking
            - ${'${{ needs.test.result }}' === 'success' ? '✅' : '❌'} Build verification
            - ${'${{ needs.security.result }}' === 'success' ? '✅' : '❌'} Security audit
            
            ${status === 'success' ? 'All checks passed! 🎉' : 'Some checks failed. Please review the logs above.'}
            
            ---
            *This comment was automatically generated by GitHub Actions*`;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }
