name: Dependency Updates

on:
  schedule:
    # Run every Monday at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:

jobs:
  update-dependencies:
    name: Check and Update Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check for outdated dependencies
        id: outdated
        run: |
          echo "Checking for outdated dependencies..."
          npm outdated --json > outdated.json || echo "{}" > outdated.json
          echo "outdated=$(cat outdated.json)" >> $GITHUB_OUTPUT

      - name: Create issue for outdated dependencies
        if: steps.outdated.outputs.outdated != '{}'
        uses: actions/github-script@v7
        with:
          script: |
            const outdated = JSON.parse('${{ steps.outdated.outputs.outdated }}');
            const packages = Object.keys(outdated);

            if (packages.length > 0) {
              const body = `## Dependency Update Required

            The following packages have updates available:

            ${packages.map(pkg => `- **${pkg}**: ${outdated[pkg].current} → ${outdated[pkg].latest}`).join('\n')}

            ### To update dependencies:
            1. Run \`npm update\`
            2. Test the application locally
            3. Create a PR with the changes

            ---
            *This issue was automatically generated by GitHub Actions*`;

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'Dependencies need updating',
              body: body,
              labels: ['dependencies', 'maintenance', 'automated']
            });

      - name: Comment on existing issues
        if: steps.outdated.outputs.outdated != '{}'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['dependencies', 'maintenance'],
              state: 'open'
            });

            const outdated = JSON.parse('${{ steps.outdated.outputs.outdated }}');
            const packages = Object.keys(outdated);

            for (const issue of issues) {
              if (issue.title.includes('Dependencies need updating')) {
                const body = `## Dependency Update Check - ${new Date().toISOString().split('T')[0]}
                
                The following packages still need updates:
                
                ${packages.map(pkg => `- **${pkg}**: ${outdated[pkg].current} → ${outdated[pkg].latest}`).join('\n')}
                
                ---
                *This comment was automatically generated by GitHub Actions*`;
                
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  body: body
                });
              }
            }
